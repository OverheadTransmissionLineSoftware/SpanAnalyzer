// This is free and unencumbered software released into the public domain.
// For more information, please refer to <http://unlicense.org/>

#ifndef OTLS_SPANANALYZER_SPANANALYZERDOC_H_
#define OTLS_SPANANALYZER_SPANANALYZERDOC_H_

#include <vector>

#include "models/transmissionline/weather_load_case.h"
#include "wx/docview.h"

#include "span.h"

/// \todo unit conversion should be an internal method

/// \par OVERVIEW
///
/// This is a SpanAnalyzer application document, which holds all of the
/// information for a SpanAnalyzer project file.
///
/// \par CONST REFERENCE
///
/// Document data access is provided via const references. This is typically
/// viewed with caution because the referenced object can be destroyed. Since
/// this document will always exist when a view attempts to access it, it
/// should not be an issue.
///
/// \par wxWIDGETS LIBRARY BUILD NOTE
///
/// This class requires that the wxWidgets library deviate from the standard
/// build. The wxUSE_STD_IOSTREAM configuration flag must be set to 0, which will
/// force wxWidgets to generate wxInputStream/wxOutputStream classes on the
/// LoadObject() and SaveObject() functions. This is required because this class
/// uses a series of XML handlers to load/save the document, and wxWidgets does
/// not allow std::streams to be used with the XmlDocument::Load() and
/// XmlDocument::Save() functions.
class SpanAnalyzerDoc : public wxDocument {
 public:
  /// \brief Constructor.
  SpanAnalyzerDoc();

  /// \brief Destructor.
  ~SpanAnalyzerDoc();

  /// \brief Appends a span.
  /// \param[in] span
  ///   The span being added.
  void AppendSpan(const Span& span);

  /// \brief Appends a weathercase.
  /// \param[in] weathercase
  ///   The weathercase being added.
  void AppendWeathercase(const WeatherLoadCase& weathercase);

  /// \brief Deletes a span.
  /// \param[in] index
  ///  The index for the span.
  bool DeleteSpan(const unsigned int& index);

  /// \brief Deletes a weathercase.
  /// \param[in] index
  ///   The index for the weathercase.
  /// This function will set any object that references the deleted
  /// weathercase to a nullptr.
  bool DeleteWeathercase(const unsigned int& index);

  /// \brief Inserts a span before the specified index.
  /// \param[in] index
  ///   The index to add the span before.
  /// \param[in] span
  ///   The span that is inserted.
  bool InsertSpan(const unsigned int& index,
                  const Span& span);

  /// \brief Inserts a weathercase before the specified index.
  /// \param[in] index
  ///   The index to add the weathercase before.
  /// \param[in] weathercase
  ///   The weathercase that is inserted.
  bool InsertWeathercase(const unsigned int& index,
                         const WeatherLoadCase& weathercase);

  /// \brief Determines if the weathercase is referenced in the spans.
  /// \param[in] weathercase
  ///   The weathercase to compare.
  /// \return The status if the weathercase is referenced or not.
  /// This function compares the memory address of the weathercases.
  bool IsReferencedWeathercase(const WeatherLoadCase* weathercase) const;

  /// \brief Determines if the weathercase description is unique.
  /// \param[in] description
  ///   The description to check.
  /// \return If the description is unique.
  /// This function is meant to be used before adding a weathercase to the
  /// document.
  bool IsUniqueWeathercase(const std::string& description,
                           const int& index_skip) const;

  /// \brief Replaces the span.
  /// \param[in] index
  ///   The index to replace.
  /// \param[in] span
  ///   The span that is replacing the indexed span.
  /// \return If the span was replaced.
  bool ReplaceSpan(const unsigned int& index,
                   const Span& span);

  /// \brief Replaces the weathercase.
  /// \param[in] index
  ///   The index to replace.
  /// \param[in] weathercase
  ///   The weathercase that is replacing the indexed weathercase.
  /// \return If the weathercase was replaced.
  bool ReplaceWeathercase(const unsigned int& index,
                          const WeatherLoadCase& weathercase);

  /// \brief Loads the document.
  /// \param[in] stream
  ///   The input stream generated by wxWidgets.
  /// \return The input stream.
  wxInputStream& LoadObject(wxInputStream& stream);

  /// \brief Saves the document.
  /// \param[out] stream
  ///   The output stream generated by wxWidgets.
  /// \return The output stream.
  wxOutputStream& SaveObject(wxOutputStream& stream);

  /// \brief Gets the spans.
  /// \return The spans.
  const std::vector<Span>& spans() const;

  /// \brief Gets the weathercases.
  /// \return The weathercases.
  const std::vector<WeatherLoadCase>& weathercases() const;

 private:
  /// \var spans_
  ///   The collection of spans.
  std::vector<Span> spans_;

  /// \var weathercases_
  ///   The weather cases.
  std::vector<WeatherLoadCase> weathercases_;

  wxDECLARE_DYNAMIC_CLASS(SpanAnalyzerDoc);
};

#endif  // OTLS_SPANANALYZER_SPANANALYZERDOC_H_
