// This is free and unencumbered software released into the public domain.
// For more information, please refer to <http://unlicense.org/>

#ifndef OTLS_SPANANALYZER_SPANANALYZERDOC_H_
#define OTLS_SPANANALYZER_SPANANALYZERDOC_H_

#include <list>

#include "models/base/units.h"
#include "wx/docview.h"

#include "span.h"

/// \par OVERVIEW
///
/// This is a SpanAnalyzer application document, which holds all of the
/// information for a SpanAnalyzer project file.
///
/// \par CONST REFERENCE
///
/// Document data access is provided via const references. This is typically
/// viewed with caution because the referenced object can be destroyed. Since
/// this document will always exist when a view attempts to access it, it
/// should not be an issue.
///
/// \par wxWIDGETS LIBRARY BUILD NOTE
///
/// This class requires that the wxWidgets library deviate from the standard
/// build. The wxUSE_STD_IOSTREAM configuration flag must be set to 0, which will
/// force wxWidgets to generate wxInputStream/wxOutputStream classes on the
/// LoadObject() and SaveObject() functions. This is required because this class
/// uses a series of XML handlers to load/save the document, and wxWidgets does
/// not allow std::streams to be used with the XmlDocument::Load() and
/// XmlDocument::Save() functions.
class SpanAnalyzerDoc : public wxDocument {
 public:
  /// \brief Constructor.
  SpanAnalyzerDoc();

  /// \brief Destructor.
  ~SpanAnalyzerDoc();

  /// \brief Appends a span.
  /// \param[in] span
  ///   The span being added.
  /// \return An iterator for the added span.
  std::list<Span>::const_iterator AppendSpan(const Span& span);

  /// \brief Converts the document between unit styles.
  /// \param[in] system
  ///   The unit system.
  /// \param[in] style_from
  ///   The unit style to convert from.
  /// \param[in] style_to
  ///   The unit style to convert to.
  void ConvertUnitStyle(const units::UnitSystem& system,
                        const units::UnitStyle& style_from,
                        const units::UnitStyle& style_to);

  /// \brief Converts the document between unit systems.
  /// \param[in] system_from
  ///   The unit system to convert from.
  /// \param[in] system_to
  ///   The unit system to convert to.
  /// This function requires that the document is in a 'consistent' unit
  /// style.
  void ConvertUnitSystem(const units::UnitSystem& system_from,
                         const units::UnitSystem& system_to);

  /// \brief Deletes a span.
  /// \param[in] element
  ///  The span element.
  void DeleteSpan(const std::list<Span>::const_iterator& element);

  /// \brief Inserts a span before the specified position.
  /// \param[in] position
  ///   The position to insert the span before.
  /// \param[in] span
  ///   The span that is inserted.
  /// \return An iterator for the inserted span.
  std::list<Span>::const_iterator InsertSpan(
      const std::list<Span>::const_iterator& position,
      const Span& span);

  /// \brief Loads the document.
  /// \param[in] stream
  ///   The input stream generated by wxWidgets.
  /// \return The input stream.
  wxInputStream& LoadObject(wxInputStream& stream);

  /// \brief Moves the span position.
  /// \param[in] element
  ///   The span element.
  /// \param[in] position
  ///   The position the span is to be moved before.
  void MoveSpan(
      const std::list<Span>::const_iterator& element,
      const std::list<Span>::const_iterator& position);

  /// \brief Replaces the span.
  /// \param[in] element
  ///   The span element to replace.
  /// \param[in] span
  ///   The span that is replacing the span element.
  /// This function maintains the same memory address for the existing span
  /// element.
  void ReplaceSpan(const std::list<Span>::const_iterator& element,
                   const Span& span);

  /// \brief Saves the document.
  /// \param[out] stream
  ///   The output stream generated by wxWidgets.
  /// \return The output stream.
  wxOutputStream& SaveObject(wxOutputStream& stream);

  /// \brief Gets the spans.
  /// \return The spans.
  const std::list<Span>& spans() const;

 private:
  /// \var spans_
  ///   The spans. This is a list so spans can be added, deleted, or modified
  ///   with a std container efficiently.
  std::list<Span> spans_;

  /// \brief This allows wxWidgets to create this class dynamically as part of
  ///   the docview framework.
  wxDECLARE_DYNAMIC_CLASS(SpanAnalyzerDoc);
};

#endif  // OTLS_SPANANALYZER_SPANANALYZERDOC_H_
