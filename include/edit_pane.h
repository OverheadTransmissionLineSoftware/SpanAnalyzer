// This is free and unencumbered software released into the public domain.
// For more information, please refer to <http://unlicense.org/>

#ifndef OTLS_SPANANALYZER_EDITPANE_H_
#define OTLS_SPANANALYZER_EDITPANE_H_

#include "models/transmissionline/weather_load_case.h"
#include "wx/docview.h"
#include "wx/treectrl.h"
#include "wx/wx.h"

#include "span.h"

/// \par OVERVIEW
///
/// This class holds additional information for the treectrl items.
class EditTreeItemData : public wxTreeItemData {
 public:
  /// \par OVERVIEW
  ///
  /// This enum contains types of treectrl items.
  enum class Type {
    kSpan,
    kWeathercase
  };

  /// \brief Constructor.
  /// \param[in] type
  ///   The type of tree item.
  /// \param[in] description
  ///   The description of the tree item.
  EditTreeItemData(Type type, const wxString& description) {
    type_ = type;
    description_ = description;
  };

  /// \brief Gets the description.
  /// \return The description.
  wxString description() {return description_;}

  /// \brief Sets the description.
  /// \param[in] description
  ///   The tree item description.
  void set_description(wxString description) {description_ = description;};

  /// \brief Sets the type.
  /// \param[in] The tree item type.
  void set_type(Type type) {type_ = type;};

  /// \brief Gets the type.
  /// \return The type.
  Type type() {return type_;}

 private:
  /// \var The description.
  wxString description_;

  /// \var The type.
  Type type_;
};

/// \par OVERVIEW
///
/// This class provides an interface for modifying the weathercases in the
/// document. The treectrl should always be in sync with the weathercases
/// in the document.
class WeathercaseTreeCtrl : public wxTreeCtrl {
 public:
  /// \brief Constructor.
  /// \param[in] parent
  ///   The parent window.
  /// \param[in] view
  ///   The view.
  WeathercaseTreeCtrl(wxWindow* parent, wxView* view);

  /// \brief Destructor.
  ~WeathercaseTreeCtrl();

  /// \brief Updates the treectrl.
  /// \param[in] hint
  ///   The hint describing what kind of update is needed. If a nullptr is
  ///   provided (as is typical when the view is first created), the treectrl
  ///   will initialize/reset.
  /// This function is called as part of the view update process.
  void Update(wxObject* hint);

 private:
  /// \brief Adds a weathercase.
  /// The weathercase will be added to the end.
  void AddWeathercase();

  /// \brief Copies the selected weathercase.
  /// \param[in] id
  ///   The item ID of the selected weathercase.
  /// The copied weathercase is inserted below the selected weathercase.
  void CopyWeathercase(const wxTreeItemId& id);

  /// \brief Deletes the selected weathercase.
  /// \param[in] id
  ///   The item ID of the selected weathercase.
  void DeleteWeathercase(const wxTreeItemId& id);

  /// \brief Deletes all of the weathercases.
  void DeleteWeathercases();

  /// \brief Edits the selected weathercase.
  /// \param[in] id
  ///   The item ID of the selected weathercase.
  void EditWeathercase(const wxTreeItemId& id);

  /// \brief Initializes the weathercases in the control.
  /// This function deletes all tree items and re-populates with weathercases
  /// in the document.
  void InitWeathercases();

  /// \brief Handles a context menu selection event.
  /// \param[in] event
  ///   The event generated by the context menu. This is used to identify which
  ///   function to call.
  void OnContextMenuSelect(wxCommandEvent& event);

  /// \brief Handles the event for a user right click, and will generate a
  ///   context menu of options.
  /// \param[in] event
  ///   The event generated by the treectrl.
  void OnItemMenu(wxTreeEvent& event);

  /// \var weathercases_
  ///   The weathercases in the document.
  std::vector<WeatherLoadCase>* weathercases_;

  /// \var view_
  ///   The view.
  wxView* view_;

  DECLARE_EVENT_TABLE()
};

/// \par OVERVIEW
///
/// This class provides an interface for modifying the spans in the document.
/// The treectrl should always be in sync with the spans in the document.
///
/// \par ACTIVATED SPAN
///
/// The span that is activated in the tree is the focus of the remaining view
/// windows.
class SpanTreeCtrl : public wxTreeCtrl {
 public:
  /// \brief Constructor.
  /// \param[in] parent
  ///   The parent window.
  /// \param[in] view
  ///   The view.
  SpanTreeCtrl(wxWindow* parent, wxView* view);

  /// \brief Destructor.
  ~SpanTreeCtrl();

  /// \brief Updates the treectrl.
  /// \param[in] hint
  ///   The hint describing what kind of update is needed. If a nullptr is
  ///   provided (as is typical when the view is first created), the treectrl
  ///   will initialize/reset.
  /// This function is called as part of the view update process.
  void Update(wxObject* hint);

 private:
  /// \brief Activates a span in the treectrl.
  /// \param[in] id
  ///   The item ID of the selected span.
  void ActivateSpan(const wxTreeItemId& id);

  /// \brief Adds a span.
  /// The span will be added to the end.
  void AddSpan();

  /// \brief Copies the selected span.
  /// \param[in] id
  ///   The item ID of the selected weathercase.
  /// The copied span is inserted below the selected span.
  void CopySpan(const wxTreeItemId& id);

  /// \brief Deletes the selected span.
  /// \param[in] id
  ///   The item ID of the selected span.
  void DeleteSpan(const wxTreeItemId& id);

  /// \brief Deletes all of the spans.
  void DeleteSpans();

  /// \brief Edits the selected span.
  /// \param[in] id
  ///   The item ID of the selected span.
  void EditSpan(const wxTreeItemId& id);

  /// \brief Initializes the spans in the control.
  /// This function deletes all tree items and re-populates with weathercases
  /// in the document.
  void InitSpans();

  /// \brief Handles a context menu selection event.
  /// \param[in] event
  ///   The event generated by the context menu. This is used to identify which
  ///   function to call.
  void OnContextMenuSelect(wxCommandEvent& event);

  /// \brief Handles a double click event, which will set the span as activated.
  ///   context menu of options.
  /// \param[in] event
  ///   The event generated by the treectrl.
  void OnItemActivate(wxTreeEvent& event);

  /// \brief Handles the event for a user right click, and will generate a
  ///   context menu of options.
  /// \param[in] event
  ///   The event generated by the treectrl.
  void OnItemMenu(wxTreeEvent& event);

  /// \var spans_
  ///   The spans in the document.
  std::vector<Span>* spans_;

  /// \var view_
  ///   The view.
  wxView* view_;

  DECLARE_EVENT_TABLE()
};

/// \par OVERVIEW
///
/// This class is an wxAUI pane that holds the weathercase and span treectrls.
class EditPane : public wxPanel {
 public:
  /// \brief Constructor.
  /// \param[in] parent
  ///   The parent window.
  /// \param[in] view
  ///   The view.
  EditPane(wxWindow* parent, wxView* view);

  /// \brief Destructor.
  ~EditPane();

  /// \brief Gets the span that is activated in the span treectrl.
  /// \return The activated span.
  Span* ActivatedSpan();

  /// \brief Updates the treectrl.
  /// \param[in] hint
  ///   The hint describing what kind of update is needed.
  /// This function is called as part of the view update process.
  void Update(wxObject* hint = nullptr);

 private:
  /// \var view_
  ///   The view.
  wxView* view_;

  /// \var treectrl_spans_
  ///  The span treectrl.
  SpanTreeCtrl* treectrl_spans_;

  /// \var treectrl_weathercases_
  ///  The weathercase treectrl.
  WeathercaseTreeCtrl* treectrl_weathercases_;
};

# endif //  OTLS_SPANANALYZER_EDITPANE_H_
